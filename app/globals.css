@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --foreground-rgb: 0, 0, 0;
  --background-start-rgb: 214, 219, 220;
  --background-end-rgb: 255, 255, 255;
}

@media (prefers-color-scheme: dark) {
  :root {
    --foreground-rgb: 255, 255, 255;
    --background-start-rgb: 0, 0, 0;
    --background-end-rgb: 0, 0, 0;
  }
}

body {
  color: rgb(var(--foreground-rgb));
  background: linear-gradient(
      to bottom,
      transparent,
      rgb(var(--background-end-rgb))
    )
    rgb(var(--background-start-rgb));
}

@layer utilities {
  .text-balance {
    text-wrap: balance;
  }
}
.text-gradient {
  @apply bg-gradient-to-r from-red-400 to-purple-500 bg-clip-text text-transparent;
  background-image: linear-gradient(106deg, #FF5C48 15.06%, #6E4AF1 42.48%);
}
.gradient-text {
  @apply bg-clip-text text-transparent;
  background-image: linear-gradient(106deg, rgba(164, 124, 243, 1) 15.06%, rgba(104, 63, 234, 1) 42.48%);
  text-shadow: 0px 0px 180px #9917FF, 0px 0px 1px rgba(255, 255, 255, 0.10);
}

/* ANIMATED  TEXTT start ////////////////////////////////////////////////////////////////////////////////////////////////////////////*/
@layer base {
  @keyframes fill-text {
    to {
      --progress: 100%;
    }
  }
  /* The @property tells the browser what type this variable is,
    a percentage in our case. If we would not add that here, the
    browser would not be able to animate it from 0% to 100%.
  */
}
@keyframes fill-text {
  to {
    --progress: 100%;
  }
}
@property --progress {
  syntax: "<percentage>";
  inherits: false;
  initial-value: 0%;
}
@layer components {
.reveal-text {
  --faded-color: #111;
  --higlighted-color: #FFF;
  /* Compared to the video, I updated this article to reflect
     a solution that's so much easier. Creating a single gradient
     with two colors, and then animating the starting/end point of
     the two colors with a CSS variable --progress. CSS @property
     makes this so much easier for us now.
  */
  --progress: 0%;
  background-image: linear-gradient(
    to right,
    var(--higlighted-color),
    var(--higlighted-color) var(--progress),
    var(--faded-color) var(--progress),
    var(--faded-color)
  );
  background-clip: text;
  background-repeat: no-repeat;
  color: transparent;
  display: inline;
  animation: fill-text linear both;
  animation-timeline: --reveal-wrapper;
  animation-range: entry 200% cover 80%;
}
}
/* ANIMATED  TEXTT End ////////////////////////////////////////////////////////////////////////////////////////////////////////////*/
  /* loader */
  .loading-screen{
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: #000;
    color: white;
    pointer-events: none;
}

.counter{
    position: fixed;
    left: 50px;
    bottom: 0px;
    display: flex;
    height: 100px;
    font-size: 100px;
    line-height: 102px;
    clip-path: polygon(0 0, 100% 0, 100% 100px, 0 100px);
}

.counter-1,
.counter-2,
.counter-3 {
    position: relative;
    top: -15px;
}

.num1offset1{
    position: relative;
    right: -25px;
}

.num1offset2{
    position: relative;
    right: -10px;
}

/* .loader{
    position: absolute;
    top: 50%;
    left: 50%;
    width: 300px;
    height: 50px;
    transform: translate(-50%, -50%);
    display: flex;
    background: rgb(80, 80, 80);
} */

/* .loader-1{
    position: relative;
    background: red;
    width: 200px;
}

.loader-2{
    position: relative;
    width: 100px;
    background: red;
}

.bar {
    height: 50px;
} */

/* .website-content{
    position: absolute;
    width: 100%;
    height: 100%;
    top: 0;
    left: 0;
    display: flex;
    justify-content: center;
    align-items: center;
} */



/* 
.header-revealer{
    position: absolute;
    top: 0;
    width: 100%;
    height: 100%;
}

.header-revealer:after{
    content:"";
    position: absolute;
    top: 0;
    left: 0;
    width: 105%;
    height: 115%;
    background: #fff;
    top: 80px;
} */

.wrapper{
  background: black;
  width: 100%;
  height: 100%;
  display: flex;
  justify-content: center;
  align-items: center;
}

.loader{
  width: 10rem;
}

.loading-animation__path{
  stroke: #D48DFF;
  stroke-width: 1;
  fill: black;
  stroke-dasharray: 500;
  stroke-dashoffset: 500;
  animation: stroke 7.5s linear infinite;
}

@keyframes stroke {
  from {
      stroke-dashoffset: 500;
  }
  to {
      stroke-dashoffset: 0;
      
  }
}